#include<stdio.h>
#include<string.h>

#define MAX_USERS 20

#define DAYS_IN_WEEK 7

#define MAX_MENU_ITEMS 10

#define MAX_FEEDBACK 50

#define MAX_USERS 20

#define DAYS_IN_WEEK 7


struct MenuItem{ char day[10],name[30];float price;};

struct Feedback{ char user[10],feedbackText[30];float price;};

struct user { char username[10],password[30];float price;};

struct MessTiming { char meal[10],startTime[30],endTime[30];};

struct MenuItem menu[DAYS_IN_WEEK][MAX_MENU_ITEMS];

int menuCount[DAYS_IN_WEEK] ={0};

struct Feedback feedbacks[MAX_FEEDBACK]; 

int feedbackCount =0;

struct user users[MAX_USERS];

int userCount =0;

int loggedInUserIndex = -1;

struct MessTiming timings[3];

void addMenuItem(),
 displayDailyMenu(const char *),
 submitFeedback(),
 viewFeedback(),
 saveAndLoadData(const char *);


void UserRegistration(),
 setMessTimings(), 
 displayMessTimings();
int UserLogin();



void addMenuItem(),
 displayDailyMenu(const char *),
 submitFeedback(),viewFeedback(),
 saveAndLoadData(const char *);



 void mainMenu();
 int main (){saveAndLoadData("load");
  mainMenu(); 
  saveAndLoadData("save");
  return 0;}

 void UserRegistration(){
    if (userCount <MAX_USERS){

        printf("Enter Username :");
        scanf("%s", users[userCount].username);
        printf("Enter Password :");
        scanf("%s", users[userCount].password);
        userCount++ ; saveAndLoadData("save");
        printf("Registration Sucessfull !\n");
    } else {
        printf("User limit reached ! \n");
    }

 }


int UserLogin()


 {

     char username[30], password[30];

     printf(" --:Enter Username : ");

     scanf("%s", username);

     printf(" --:Enter Password : ");

     scanf("%s", password);

     for (int i = 0; i < userCount; i++)

     {
        if (strcmp(username, users[i].username) == 0 && strcmp(password, users[i].password) == 0)

         {
             loggedInUserIndex = i;
             printf("Login Sucessfull !\n");
             return 1;
         }

     }
     printf("invalid Username or Password .\n");

     return 0;

 }
void addMenuItem(){

    char day[10];

    printf( " enter Day Of Week (e.g , Monday); ");
    scanf("%s", day);

    int dayIndex = -1;
    if (strcmp(day , "monday" )==0) dayIndex =0;

    else if(strcmp(day , "Tuesday" )==0) dayIndex =1; 

    else if(strcmp(day , "Wednesday" )==0) dayIndex =2;

    else if(strcmp(day , "Thersday" )==0) dayIndex =3;

    else if(strcmp(day , "Firday" )==0) dayIndex =4;

    else if(strcmp(day , "Saturday" )==0) dayIndex =5;

    else if(strcmp(day , "Sunday" )==0) dayIndex =6;

    if (dayIndex != -1 && menuCount[dayIndex]< MAX_MENU_ITEMS){
        strcpy(menu[dayIndex][menuCount[dayIndex]].day , day);

        printf("--:Enter item name :");
        scanf("%s", menu[dayIndex][menuCount[dayIndex]].name);

        printf("--:Enter item price :");
        scanf("%f", &menu[dayIndex][menuCount[dayIndex]].price);

    menuCount[dayIndex]++;
    saveAndLoadData("save");
    printf("menu Item Add Sucessfully :)!\n");

    } else {
         printf("invelid Day or menu is full for for the day (: ! \n");

    }

}

void displayDailyMenu(const char *day)

{

    int dayIndex = -1;
    if (strcmp(day, "Monday")==0) dayIndex=0;
    else if (strcmp(day, "Tuesday")==0) dayIndex=1;
    else if (strcmp(day, "Wedensday")==0) dayIndex=2;
    else if (strcmp(day, "Thursday")==0) dayIndex=3;
    else if (strcmp(day, "Friday")==0) dayIndex=4;
    else if (strcmp(day, "Saturday")==0) dayIndex=5;
    else if (strcmp(day, "Sunday")==0) dayIndex=6;
    if (dayIndex != -1)
    {

        printf("Menu for %s:\n", day);

        for (int i = 0; i < menuCount[dayIndex]; i++)

        {
            printf("%d. %s - $%.2f\n", i + 1, menu[dayIndex][i].name, menu[dayIndex][i].price);
        }
    }
    else { printf("Invalid day!\n");
    }

}

void submitFeedback()

{

    if (loggedInUserIndex == -1)

    {
        printf(" Plese log in to submit feedback.\n");
        return;
    }
    if (feedbackCount < MAX_FEEDBACK)
    {
        strcpy(feedbacks[feedbackCount].user, users[loggedInUserIndex].username);
        printf("Enter your feedback: ");
        scanf(" %[^\n]", feedbacks[feedbackCount].feedbackText);
        feedbackCount++;
        saveAndLoadData("save");
        printf(" (: Feedback submitted successfully! :)\n");
    }
    else { printf("(:Feedback list is full!:)\n");
     }
}
void viewFeedback(){
    printf("feedback : \n");
    for (int i=0; i< feedbackCount ; i++){
        printf("%d. %s: %s\n" , i+1,  feedbacks[i].user, feedbacks[i].feedbackText);
    }
 }

    void setMessTimings() 
{
    strcpy(timings[0].meal, "Breakfast");

    strcpy(timings[0].startTime, "07:00 AM");

    strcpy(timings[0].endTime, "09:00 AM");

    strcpy(timings[1].meal, "Lunch");

    strcpy(timings[1].startTime, "12:00 PM");

    strcpy(timings[1].endTime, "2:00 PM");

    strcpy(timings[2].meal, "Dinner");

    strcpy(timings[2].startTime, "6:00 PM");

    strcpy(timings[2].endTime, "8:00 PM");
    
}

void displayMessTimings()

{
    printf("(:Mess Timings:)\n");
    for (int i = 0; i < 3; i++)
    {
        printf("%s: %s - %s\n", timings[i].meal, timings[i].startTime, timings[i].endTime);
    }
}


void saveAndLoadData(const char *mode)
{
    FILE *file = fopen("data.bin", mode[0] == 's' ? "wb" : "rb");
    if  (file == NULL)
    {
        printf(" (: Error opening file for :) %s.\n" , mode[0]== 's'? " writing" : " reading ");
        return;
    }if (mode[0]== 's')

    {
        fwrite(&userCount, sizeof(int), 1, file);
        fwrite(users , sizeof(struct user), userCount, file);
        fwrite(menuCount, sizeof(int),DAYS_IN_WEEK, file);
        for ( int i=0; i<DAYS_IN_WEEK ; i++)

        {

            fwrite(menu[i], sizeof(struct MenuItem), menuCount[i], file);

        }

            fwrite(&feedbackCount , sizeof(int),1, file);
            fwrite(feedbacks , sizeof(struct Feedback), feedbackCount, file);
            fwrite(timings, sizeof(struct MessTiming ),3, file);

    } else
{

    fread(&userCount, sizeof(int), 1, file);
    fread(users, sizeof(struct user), userCount, file);
    fread(menuCount, sizeof(int), DAYS_IN_WEEK, file);
    for (int i = 0; i < DAYS_IN_WEEK; i++)
    {
       fread(menu[i], sizeof(struct MenuItem), menuCount[i], file);
    }
    fread(&feedbackCount, sizeof(int), 1, file);
    fread(feedbacks, sizeof(struct Feedback), feedbackCount, file);
    fread(timings, sizeof(struct MessTiming), 3, file);
}
fclose(file);
}

void mainMenu()

{
    setMessTimings();
    int choice;
    char day[10];
    while (1) 

    {
        printf("\n---:) Mess Managment System (:---\n");
        printf("1. Register -:\n2. Loging\n3. Add Menu Item-:\n4. Display Menu -:\n5. submit Feedback -:\n6. View Feedback -:\n7. View Mess Timings -:\n8. Exit\nEnter choice -: ");
        scanf("%d", &choice);
        switch (choice) 
        {
            case 1: UserRegistration();
             break;
           case 2: if (UserLogin()) {}

            break;
            case 3: addMenuItem();
             break;
            case 4: printf("Enter day to view menu: "); 
            scanf("%s", day); displayDailyMenu(day);
             break;
            case 5: submitFeedback();
             break;
            case 6: viewFeedback();
             break;
            case 7: displayMessTimings(); 
            break;
            case 8: printf("Exiting........\n");
             saveAndLoadData("save");
             return;
            default: printf(":)Invalid choice. Try again.\n");
        }
    }
    }
